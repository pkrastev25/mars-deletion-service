stages:
  - build
  - unitTests
  # Use only if the deletion-svc-tests-env is not available
  - createDeletionSvcTestEnvironment
  # The Gitlab CI pipeline is very slow for running these tests. Better run them locally
  - integrationTests
  - deploy

variables:
  DOCKER_HOST: "tcp://localhost:2375"
  # Pull only, requires login
  NEXUS_CACHE: "nexus.informatik.haw-hamburg.de"
  # Push only, requires login
  GITLAB_REGISTRY: "docker-hub.informatik.haw-hamburg.de"
  PROJECT: "mars/mars-deletion-svc"
  SERVICE_NAME: "deletion-svc"

cache:
  untracked: true

build:
  stage: build
  image: $NEXUS_CACHE/microsoft/dotnet:2.0.0-sdk
  tags:
    - k8s
  script:
    - dotnet clean -c Release -v minimal /maxcpucount
    - dotnet build -c Release -v minimal /maxcpucount
    - dotnet publish -o ./out -v minimal /maxcpucount
  artifacts:
    untracked: true

unitTests:
  stage: unitTests
  image: $NEXUS_CACHE/microsoft/dotnet:2.0.0-sdk
  tags:
    - k8s
  script:
    - cd UnitTests
    - dotnet test -c Release -v minimal /maxcpucount

createDeletionSvcTestEnvironment:
  when: manual
  stage: createDeletionSvcTestEnvironment
  image: $NEXUS_CACHE/docker:icc-dind
  tags:
    - k8s
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $GITLAB_REGISTRY
    - cd DeletionSvcTestEnvironment
    - sh ./start.sh

integrationTests:
  stage: integrationTests
  image: $NEXUS_CACHE/deletion-svc-test-env
  services:
    - $NEXUS_CACHE/docker:icc-dind
  tags:
    - k8s
  script:
    - cd IntegrationTests
    - docker login -u $NEXUS_USER -p $NEXUS_PW $NEXUS_CACHE
    - docker-compose run deletion-svc-tests

deploy:
  stage: deploy
  image: $NEXUS_CACHE/docker:stable-dind
  services:
    - $NEXUS_CACHE/docker:stable-dind
  tags:
    - k8s
  only:
    - master
  script:
    # Login to Nexus to pull images
    - docker login -u $NEXUS_USER -p $NEXUS_PW $NEXUS_CACHE
    - docker build -t $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:latest .
    - docker tag $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:latest $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:$CI_PIPELINE_ID
    - docker tag $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:latest $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:$CI_COMMIT_SHA
    # Login to GitLab to push images
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $GITLAB_REGISTRY
    - docker push $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:latest
    - docker push $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:$CI_PIPELINE_ID
    - docker push $GITLAB_REGISTRY/$PROJECT/$SERVIE_NAME:$CI_COMMIT_SHA